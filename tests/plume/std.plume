/// Test join
@join
  quill
  mark
end
/// Output
quillmark
/// End

/// Test join with sep
@join(sep: \n)
  - quill
  - mark
end
/// Output
quill
mark
/// End

/// Test table
let t = @table
  - quill
  - mark
  quill: ink
end
$t[2], $t.quill
/// Output
mark, ink
/// End

/// Test void
quill
@void
  mark
  ink
end
quill
/// Output
quillquill
/// End

/// Test type
$type($table())\n
$type(nib)\n
$type($(1+1))
/// Output
table
string
number
/// End

/// Test seq 1
for write in seq(1, 5)
  $write
end
/// Output
12345
/// End

/// Test seq 2
for write in seq(3)
  $write
end
/// Output
123
/// End

/// Test enumerate
let t = $table(quill, wing, bird)
@join(sep:\n)
  for item in enumerate(t)
    - Item $item.index is $item.value.
  end
end
/// Output
Item 1 is quill.
Item 2 is wing.
Item 3 is bird.
/// End

/// Test items
let t = $table(first: quill, second: wing, bonus: bird)
@join(sep:\n)
  for item in items(t)
    - Item "$item.key" is _($item.value)_.
  end
end
/// Output
Item "first" is _(quill)_.
Item "second" is _(wing)_.
Item "bonus" is _(bird)_.
/// End

/// Test import text 1
$import(tests/plume/toimport/text)
/// Output
wings
/// End

/// Test import text 2
quill\n
$import(tests/plume/toimport/text)\n
nib
/// Output
quill
wings
nib
/// End

/// Test import lib 1
let lib = $import(tests/plume/toimport/lib)
$lib.nib
/// Output
quill
/// End

/// Test import lib 2
let static infos = bird
let lib = $import(tests/plume/toimport/lib2)
$lib.wing() $infos
/// Output
blue quill bird
/// End

/// Test len
let t = @table
  - Wing
  - Nib
  quill: blue
end
$len($t)
/// Output
2
/// End

/// Test table append
let t = @table
  - Wing
  - Nib
  quill: blue
end
$len($t)\n
$append($t, paint)
$len($t)
/// Output
2
3
/// End

/// Test table remove
let t = @table
  - Wing
  - Nib
  quill: blue
end
$len($t)\n
$remove($t)\n
$len($t)
/// Output
2
Nib
1
/// End
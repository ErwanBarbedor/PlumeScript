--File generated by preprocessor.lua
--[[This file is part of Plume
PlumeðŸª¶ is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.
PlumeðŸª¶ is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.
You should have received a copy of the GNU General Public License along with PlumeðŸª¶.
If not, see <https://www.gnu.org/licenses/>.
]]
return function (plume)
    function plume.run(runtime)
        local empty=plume.obj.empty
        local ptable=plume.obj.table
        local function _type(x)
            local t=type(x)
            if t=="table" then
                if t==empty then
                    return "empty"
                else
                    return x[1]
                end
            else
                return t
            end
        end
        local bit=require("bit")
        local OP_BITS=7
        local ARG1_BITS=5
        local ARG2_BITS=20
        local ARG1_SHIFT=ARG2_BITS
        local OP_SHIFT=ARG1_BITS + ARG2_BITS
        local MASK_OP=bit.lshift(1, OP_BITS) - 1
        local MASK_ARG1=bit.lshift(1, ARG1_BITS) - 1
        local MASK_ARG2=bit.lshift(1, ARG2_BITS) - 1
        require("table.new")
        local bytecode=runtime.bytecode
        local constants=runtime.constants
        local filesMemory=runtime.filesMemory
        local ip=0
        local tic=0
        local ms=table.new(2^14, 0)
        local msf=table.new(2^8, 0)
        local msp=0
        local msfp=0
        local vs=table.new(2^10, 0)
        local vsf=table.new(2^8, 0)
        local vsp=0
        local vsfp=0
        local calls=table.new(2^8, 0)
        local cp=0
        local memory=table.new(2^8, 0)
        local mp=0
        local jump=0
        local instr, op, arg1, arg2=0, 0, 0, 0
        local limit=0
        local macro, x, y
        local hook=plume.hook
        ::DISPATCH::
                        	if hook then
                if ip>0 then
                    hook(
                        tic, ip, jump,
                        instr, op, arg1, arg2,
                        ms, msp, msf, msfp,
                        vs, vsp, vsf, vsfp,
                        calls, cp,
                        memory, mp
                    )
                end
            end
            if jump>0 then
                ip=jump
                jump=0
            else
                ip=ip+1
            end
            tic=tic+1
                        instr=bytecode[ip]
            op=bit.band(bit.rshift(instr, OP_SHIFT), MASK_OP)
            arg1=bit.band(bit.rshift(instr, ARG1_SHIFT), MASK_ARG1)
            arg2=bit.band(instr, MASK_ARG2)
            			if op==1 then goto LOAD_CONSTANT
			elseif op==2 then goto LOAD_LOCAL
			elseif op==3 then goto LOAD_LEXICAL
			elseif op==4 then goto LOAD_STATIC
			elseif op==5 then goto LOAD_EMPTY
			elseif op==6 then goto STORE_LOCAL
			elseif op==7 then goto STORE_LEXICAL
			elseif op==8 then goto STORE_STATIC
			elseif op==9 then goto TABLE_NEW
			elseif op==10 then goto TABLE_ADD
			elseif op==11 then goto TABLE_SET
			elseif op==12 then goto TABLE_SET_ACC
			elseif op==13 then goto TABLE_INDEX
			elseif op==14 then goto ENTER_SCOPE
			elseif op==15 then goto LEAVE_SCOPE
			elseif op==16 then goto ENTER_FILE
			elseif op==17 then goto LEAVE_FILE
			elseif op==18 then goto BEGIN_ACC
			elseif op==19 then goto ACC_TABLE
			elseif op==20 then goto ACC_TEXT
			elseif op==21 then goto ACC_EMPTY
			elseif op==22 then goto ACC_CALL
			elseif op==23 then goto RETURN
			elseif op==24 then goto JUMP_IF
			elseif op==25 then goto JUMP_IF_NOT
			elseif op==26 then goto JUMP_IF_NOT_EMPTY
			elseif op==27 then goto JUMP
			elseif op==28 then goto OPP_ADD
			elseif op==29 then goto OPP_MUL
			elseif op==30 then goto OPP_SUB
			elseif op==31 then goto OPP_DIV
			elseif op==32 then goto OPP_NEG
			elseif op==33 then goto OPP_MOD
			elseif op==34 then goto OPP_POW
			elseif op==35 then goto OPP_GTE
			elseif op==36 then goto OPP_LTE
			elseif op==37 then goto OPP_GT
			elseif op==38 then goto OPP_LT
			elseif op==39 then goto OPP_EQ
			elseif op==40 then goto OPP_NEQ
			elseif op==41 then goto OPP_AND
			elseif op==42 then goto OPP_NOT
			elseif op==43 then goto OPP_OR
			elseif op==44 then goto END
			end
            			::LOAD_CONSTANT::
	            	msp=msp+1
	            ms[msp]=constants[arg2]
				goto DISPATCH
			::LOAD_LOCAL::
	            	msp=msp+1
	            ms[msp]=vs[vsf[vsfp] + arg2-1]
				goto DISPATCH
			::LOAD_LEXICAL::
	            	msp=msp+1
	            ms[msp]=vs[vsf[vsfp-arg1]+arg2-1]
				goto DISPATCH
			::LOAD_STATIC::
	            	msp=msp+1
	            ms[msp]=filesMemory[memory[mp]][arg2]
				goto DISPATCH
			::LOAD_EMPTY::
	            	msp=msp+1
	            ms[msp]=empty
				goto DISPATCH
			::STORE_LOCAL::
	            	vs[vsf[vsfp] + arg2-1]=ms[msp]
	            msp=msp-1
				goto DISPATCH
			::STORE_LEXICAL::
	            	vs[vsf[vsfp-arg1]+arg2-1]=ms[msp]
	            msp=msp-1
				goto DISPATCH
			::STORE_STATIC::
	            	filesMemory[memory[mp]][arg2]=ms[msp]
	            msp=msp-1
				goto DISPATCH
			::TABLE_NEW::
	            	msp=msp + 1
	            ms[msp]=table.new(0, arg1)
				goto DISPATCH
			::TABLE_ADD::
					goto DISPATCH
			::TABLE_SET::
	            	ms[msp-2][ms[msp-1]]=ms[msp]
	            msp=msp-3
				goto DISPATCH
			::TABLE_SET_ACC::
	            	ms[msf[msfp]][ms[msp]]=ms[msp-1]
	            msp=msp-2
				goto DISPATCH
			::TABLE_INDEX::
	            	ms[msp-1]=ms[msp][ms[msp-1]]
	            msp=msp-1
				goto DISPATCH
			::ENTER_SCOPE::
	            	vsfp=vsfp+1
	            vsf[vsfp]=vsp+1-arg1
	            for i=1, arg2-arg1 do
	                vsp=vsp+1
	                vs[vsp]=empty
	            end
				goto DISPATCH
			::LEAVE_SCOPE::
	            	vsp=vsf[vsfp]-1
	            vsfp=vsfp-1
				goto DISPATCH
			::ENTER_FILE::
	            	mp=mp+1
	            memory[mp]=arg2
				goto DISPATCH
			::LEAVE_FILE::
	            	mp=mp-1
				goto DISPATCH
			::BEGIN_ACC::
	            	msfp=msfp + 1
	            msf[msfp]=msp+1
				goto DISPATCH
			::ACC_TABLE::
	            	limit=msf[msfp]+1
	            y=0
	            for k, v in pairs(ms[limit-1]) do
	                y=y+1
	            end
	            x=ptable(msp-limit+1, y)
	            for i=1, msp-limit+1 do
	                x[2][i]=ms[limit+i-1]
	            end
	            for k, v in pairs(ms[limit-1]) do
	                            if not x[2][k] then
	                table.insert(x[3], k)
	            end
	            x[2][k]=v
	            end
	            ms[limit-1]=x
	            msp=limit - 1
	                        msfp=msfp-1
				goto DISPATCH
			::ACC_TEXT::
	            	limit=msf[msfp]
	            if msp-limit>=1 then
	                ms[limit]=table.concat(ms, "", limit, msp)
	            elseif msp-limit==0 then
	                ms[limit]=ms[msp]
	            else
	                ms[limit]=empty
	            end
	            msp=limit
	                        msfp=msfp-1
				goto DISPATCH
			::ACC_EMPTY::
	            	msp=msp+1
	            ms[msp]=empty
	                        msfp=msfp-1
				goto DISPATCH
			::ACC_CALL::
	            	macro=ms[msp]
	            msp=msp - 1
	            if _type(macro)=="macro" then
	                            vsfp=vsfp+1
	            vsf[vsfp]=vsp+1-0
	            for i=1, macro[3]+macro[4]-0 do
	                vsp=vsp+1
	                vs[vsp]=empty
	            end
	                            x=msp-msf[msfp]
	            if x ~=macro[3] then
	                            return false, "Wrong number of positionnal arguments for macro '" .. macro[6] .. "', " ..   x .. " instead of " .. macro[3], ip
	            end
	            for i=1, x do
	                vs[vsf[vsfp]+i-1]=ms[msp+i-x]
	            end
	            msp=msf[msfp]
	                            for k, v in pairs(ms[msf[msfp]]) do
	                local i=macro[5][k]
	                if not i then
	                                return false, "Unknow named parameter '" .. k .."' for macro '" .. macro[6] .."'.", ip
	                end
	                vs[vsf[vsfp]+i-1]=v
	            end
	            msp=msp-1
	                jump=macro[2]
	                cp=cp + 1
	                calls[cp]=ip+1
	            else
	                            return false, "Try to call a '" .. _type(macro) .. "' value", ip
	            end
	                        msfp=msfp-1
				goto DISPATCH
			::RETURN::
	            	jump=calls[cp]
	            cp=cp - 1
	                        vsp=vsf[vsfp]-1
	            vsfp=vsfp-1
				goto DISPATCH
			::JUMP_IF::
	            	if ms[msp] then
	                jump=arg2
	            end
	            msp=msp-1
				goto DISPATCH
			::JUMP_IF_NOT::
	            	if not ms[msp] then
	                jump=arg2
	            end
	            msp=msp-1
				goto DISPATCH
			::JUMP_IF_NOT_EMPTY::
	            	if ms[msp] ~=empty then
	                jump=arg2
	            end
	            msp=msp-1
				goto DISPATCH
			::JUMP::
	            	jump=arg2
				goto DISPATCH
			::OPP_ADD::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x + y
				goto DISPATCH
			::OPP_MUL::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x * y
				goto DISPATCH
			::OPP_SUB::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x - y
				goto DISPATCH
			::OPP_DIV::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x / y
				goto DISPATCH
			::OPP_NEG::
	            	x=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	            ms[msp]=- y
				goto DISPATCH
			::OPP_MOD::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x % y
				goto DISPATCH
			::OPP_POW::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x ^ y
				goto DISPATCH
			::OPP_GTE::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x >=y
				goto DISPATCH
			::OPP_LTE::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x <=y
				goto DISPATCH
			::OPP_GT::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x > y
				goto DISPATCH
			::OPP_LT::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x < y
				goto DISPATCH
			::OPP_EQ::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x==y
				goto DISPATCH
			::OPP_NEQ::
	            	x=ms[msp-1]
	            y=ms[msp]
	                        if _type(x)=="string" then
	                x=tonumber(x)
	            elseif _type(x) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(x).. " value.", ip
	            end
	                        if _type(y)=="string" then
	                y=tonumber(y)
	            elseif _type(y) ~="number" then
	                            return false, "Cannot do comparison or arithmetic with " .. _type(y).. " value.", ip
	            end
	            msp=msp-1
	            ms[msp]=x ~=y
				goto DISPATCH
			::OPP_AND::
	            	msp=msp-1
	            ms[msp]=ms[msp] and ms[msp+1]
				goto DISPATCH
			::OPP_NOT::
	            	ms[msp]=not ms[msp]
				goto DISPATCH
			::OPP_OR::
	            	msp=msp-1
	            ms[msp]=ms[msp] or ms[msp+1]
				goto DISPATCH
		::END::
        	return true, ms[1], ip
    end
end